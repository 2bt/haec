#!/usr/bin/env python
# coding=utf-8


import pylab as plt
import matplotlib.patches as patches
import matplotlib.ticker as ticker
import sys
import matplotlib as mpl
mpl.rcParams['font.size'] = 12
#mpl.rcParams['font.family'] = "monospace"
#mpl.rcParams['font.monospace'] = "Inconsulata"
#mpl.rcParams['axes.labelsize'] = 16.
#mpl.rcParams['xtick.labelsize'] = 12.
#mpl.rcParams['ytick.labelsize'] = 12.
# plt.rcParams['text.latex.preamble']=[r"\usepackage[cdfont]{tudscrfonts}"]
#Options
# params = {'text.usetex' : True,
#          'font.size' : 11,
#          'font.family' : 'UniverseCE-Light',
#           'text.latex.unicode': True,
#         }
# plt.rcParams.update(params)



path = sys.argv[1] if len(sys.argv) > 1 else "."


def t2s(t):
	h, m, s = map(float, t.split(":"))
	return s + m*60 + h*3600



# fetch data

time = []
currents = []
MEAN = []
s = 0
for i, l in enumerate(list(file(path + "/cambri.log"))[2:]):
	c = l.split(" | ")
	time.append(t2s(c.pop(0)))
	c = map(float, c)
	currents.append(c)
	s += sum(c)
	MEAN.append(s / (i + 1))

N = len(currents[0])
N = max(i for i, b in enumerate(map(any, zip(*currents))) if b) + 1

events = {}

for l in list(file(path + "/event.log")):
	f = l.split()
	e = {
		"t": t2s(f[0]),
		"e": f[1],
		"d": dict(
			x.split(":")
			for x in "".join(f[2:])[1:-1].split(";") if f[2:]
		)
	}
	if not "id" in e["d"]: continue

	eid = e["d"]["id"]
	es = events[eid] = events.get(eid, [])
	es.append(e)






colormap = plt.get_cmap("jet")
#colormap = plt.get_cmap("terrain")


# plots
#f, (ax, bx) = plt.subplots(2, sharex=True, facecolor='white')
figure, (ax, bx) = plt.subplots(2, sharex=True, figsize=(14,8))
figure.subplots_adjust(hspace=0)
#ax.set_ylim([0,20])
ax.set_ylim([0,450])

M = 229
#M = N

ax.set_ylabel("Energie in W")
bx.set_ylabel(u"Worker-AktivitÃ¤t")
bx.set_xlabel("Zeit (hh:mm)")
bx.set_ylim(N-M, N)
ax.xaxis.grid(True, which='major')
bx.xaxis.grid(True, which='major')

def format_time(t, i):
	t = int(t)
	s = t % 60
	m = t / 60 % 60
	h = t / 3600
	return "%02d:%02d" % (h, m)


ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_time))
ax.xaxis.set_major_locator(ticker.IndexLocator(60 * 10,	-1))
ax.xaxis.set_minor_locator(ticker.IndexLocator(60, 		-1))

plt.xlim(0, time[-1])



## plot

for i in range(N)[::-1]:
#if 0:

	facecolor = colormap(i * 1.0 / M)
#	edgecolor = [x * 1.0 for x in facecolor[:3]]

	ax.fill_between(time, [sum(c[:i+1]) for c in currents], facecolor=facecolor, linewidth=0)

ax.plot(time, [sum(c) for c in currents], c='black', linewidth=0.5)



# ax.plot(time, MEAN, c="black", linestyle="dashed", linewidth=1.5)
ax.plot(time, [MEAN[-1]]*len(time), c="black", linestyle="dashed", linewidth=1.0)
print "mean power", MEAN[-1]


## events


#SHRINK = 0.1
SHRINK = 0


for k, es in events.iteritems():
#if 0:
	i = int(k) / 1000 * 8 + int(k) % 10 - 9
	h = N - i - 1
	print k, h

#	bx.text(-10, h + 0.5, k, verticalalignment="center", horizontalalignment="right")

	facecolor = colormap(i * 1.0 / M)
	edgecolor = facecolor # [x * 0.5 for x in facecolor[:3]]

#	p = patches.Rectangle((0, h), time[-1], 1, lw=0, facecolor=facecolor, alpha=0.1)
#	bx.add_patch(p)

	state = "OFF"

	for e in es:
		if state == "OFF" and e["e"] in ("WORKER_ON", "SWITCH_ON"):
			state = "ON"

			beg = e["t"]
			end = time[-1]
			for f in es:
				if f["e"] in ("WORKER_OFF", "SWITCH_OFF") and f["t"] >= beg:
					end = f["t"]
					break
			p = patches.Rectangle((beg, h), end - beg, 1,
				facecolor=facecolor, edgecolor='none', alpha=0.5)
			bx.add_patch(p)


#			if e["e"][:6] == "SWITCH":
#				p = patches.Rectangle((beg, h), end - beg, 1,
#					facecolor=facecolor, edgecolor=edgecolor, alpha=0.7)
#				bx.add_patch(p)


		if e["e"] in ("WORKER_OFF", "SWITCH_ON"):
			state = "OFF"



		if state != "ONLINE" and e["e"] == "WORKER_ONLINE":
			if state == "OFF":
				beg = e["t"]
				end = time[-1]
				for f in es:
					if f["e"] in ("WORKER_OFF", "SWITCH_OFF") and f["t"] >= beg:
						end = f["t"]
						break
				p = patches.Rectangle((beg, h), end - beg, 1,
					facecolor=facecolor, edgecolor='none', alpha=0.5)
				bx.add_patch(p)


			state = "ONLINE"

			beg = e["t"]
			end = time[-1]
			for f in es:
				if f["e"] in ("WORKER_OFFLINE", "WORKER_OFF") and f["t"] >= beg:
					end = f["t"]
					break
			p = patches.Rectangle((beg, h + SHRINK), end - beg, 1-SHRINK*2,
				facecolor=facecolor, edgecolor='none', alpha=0.7)
			bx.add_patch(p)


		if e["e"] == "WORKER_OFFLINE":
			state = "ON"


		if e["e"] == "WORK_COMMAND":

			beg = e["t"]
			end = time[-1]
			for f in es:
				if f["e"] == "WORK_COMPLETE" and f["t"] >= beg and f["d"]["work-id"] == e["d"]["work-id"]:
					end = f["t"]
					break
#			p = patches.Rectangle((beg, h + 0.3), end - beg, 0.4, facecolor="#555555", edgecolor='none', alpha=0.8)
			p = patches.Rectangle((beg, h + SHRINK*3), end - beg, 1-SHRINK*6, facecolor="#555555", edgecolor='none', alpha=0.8)
			bx.add_patch(p)




plt.tick_params(axis='y', which='both', left='off', right='off', labelleft='off')
plt.setp(ax.get_xticklabels(), visible=False)
plt.setp(bx.get_xticklabels(), visible=True)


for i in range(0,6):
	bx.plot(time, [N + 6-2**i*7]*len(time), c="black", linewidth=1.0)


#plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
#figure.autofmt_xdate()


plt.savefig("plot.pdf")
plt.show()


